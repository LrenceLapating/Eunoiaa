create table public.activity_logs (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  user_type character varying(20) not null,
  action character varying(100) not null,
  details jsonb null,
  ip_address inet null,
  user_agent text null,
  created_at timestamp with time zone null default now(),
  constraint activity_logs_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_activity_user on public.activity_logs using btree (user_id, user_type) TABLESPACE pg_default;

create index IF not exists idx_activity_date on public.activity_logs using btree (created_at) TABLESPACE pg_default;






create table public.ai_interventions (
  id uuid not null default gen_random_uuid (),
  student_id uuid not null,
  assessment_id uuid null,
  counselor_id uuid null,
  risk_level character varying(20) not null,
  intervention_title text not null,
  intervention_text text not null,
  overall_strategy text null,
  dimension_interventions jsonb null default '{}'::jsonb,
  action_plan jsonb null default '[]'::jsonb,
  intervention_type character varying(50) null default 'ai_generated'::character varying,
  status character varying(20) null default 'generated'::character varying,
  counselor_name character varying(255) null,
  counselor_message text null,
  is_read boolean null default false,
  read_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint ai_interventions_pkey primary key (id),
  constraint fk_ai_interventions_counselor foreign KEY (counselor_id) references counselors (id) on delete set null,
  constraint fk_ai_interventions_student foreign KEY (student_id) references students (id) on delete CASCADE,
  constraint ai_interventions_intervention_type_check check (
    (
      (intervention_type)::text = any (
        (
          array[
            'ai_generated'::character varying,
            'ai_structured'::character varying,
            'manual'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint ai_interventions_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'at-risk'::character varying,
            'moderate'::character varying,
            'healthy'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint ai_interventions_status_check check (
    (
      (status)::text = any (
        (
          array[
            'generated'::character varying,
            'sent'::character varying,
            'read'::character varying,
            'archived'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_student_id on public.ai_interventions using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_counselor_id on public.ai_interventions using btree (counselor_id) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_risk_level on public.ai_interventions using btree (risk_level) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_status on public.ai_interventions using btree (status) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_created_at on public.ai_interventions using btree (created_at) TABLESPACE pg_default;

create index IF not exists idx_ai_interventions_is_read on public.ai_interventions using btree (is_read) TABLESPACE pg_default;

create trigger trigger_update_ai_interventions_updated_at BEFORE
update on ai_interventions for EACH row
execute FUNCTION update_ai_interventions_updated_at ();

create trigger update_ai_interventions_updated_at BEFORE
update on ai_interventions for EACH row
execute FUNCTION update_updated_at_column ();





create table public.assessment_assignments (
  id uuid not null default gen_random_uuid (),
  bulk_assessment_id uuid null,
  student_id uuid null,
  status character varying(50) null default 'assigned'::character varying,
  assigned_at timestamp with time zone null default now(),
  completed_at timestamp with time zone null,
  expires_at timestamp with time zone null,
  risk_level character varying(20) null,
  constraint assessment_assignments_pkey primary key (id),
  constraint assessment_assignments_bulk_assessment_id_student_id_key unique (bulk_assessment_id, student_id),
  constraint assessment_assignments_bulk_assessment_id_fkey foreign KEY (bulk_assessment_id) references bulk_assessments (id) on delete CASCADE,
  constraint assessment_assignments_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'at-risk'::character varying,
            'moderate'::character varying,
            'healthy'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint assessment_assignments_status_check check (
    (
      (status)::text = any (
        (
          array[
            'assigned'::character varying,
            'completed'::character varying,
            'expired'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_assessment_assignments_bulk_id on public.assessment_assignments using btree (bulk_assessment_id) TABLESPACE pg_default;

create index IF not exists idx_assessment_assignments_student_id on public.assessment_assignments using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessment_assignments_status on public.assessment_assignments using btree (status) TABLESPACE pg_default;










create table public.assessments_42items (
  id uuid not null default gen_random_uuid (),
  student_id uuid null,
  assessment_type character varying(50) not null,
  responses jsonb not null,
  scores jsonb not null,
  overall_score numeric(5, 2) null,
  risk_level character varying(20) null,
  completed_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  assignment_id uuid null,
  at_risk_dimensions jsonb null default '[]'::jsonb,
  updated_at timestamp with time zone null default now(),
  constraint assessments_pkey primary key (id),
  constraint assessments_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'low'::character varying,
            'moderate'::character varying,
            'high'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_assessments_student_id on public.assessments_42items using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_completed_at on public.assessments_42items using btree (completed_at) TABLESPACE pg_default;

create index IF not exists idx_assessments_assignment_id on public.assessments_42items using btree (assignment_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_updated_at on public.assessments_42items using btree (updated_at) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_student on public.assessments_42items using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_assignment on public.assessments_42items using btree (assignment_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_risk_level on public.assessments_42items using btree (risk_level) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_completed on public.assessments_42items using btree (completed_at) TABLESPACE pg_default;

create trigger update_assessments_42items_updated_at BEFORE
update on assessments_42items for EACH row
execute FUNCTION update_updated_at_column ();










create table public.assessments_42items_history (
  id uuid not null default gen_random_uuid (),
  original_assessment_id uuid not null,
  student_id uuid not null,
  student_name text not null,
  student_email text not null,
  assessment_type text not null default 'ryff_42'::text,
  responses jsonb not null default '{}'::jsonb,
  scores jsonb not null default '{}'::jsonb,
  original_created_at timestamp with time zone not null default now(),
  archived_at timestamp with time zone not null default now(),
  constraint assessments_42items_history_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_history_original_id on public.assessments_42items_history using btree (original_assessment_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_history_student_id on public.assessments_42items_history using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_42items_history_archived_at on public.assessments_42items_history using btree (archived_at) TABLESPACE pg_default;












create table public.assessments_84items (
  id uuid not null default gen_random_uuid (),
  student_id uuid not null,
  responses jsonb not null,
  scores jsonb not null,
  overall_score numeric(6, 2) null,
  risk_level character varying(20) null,
  completed_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  assessment_type character varying(50) not null default '84-item'::character varying,
  assignment_id uuid null,
  at_risk_dimensions jsonb null default '[]'::jsonb,
  updated_at timestamp with time zone null default now(),
  constraint assessments_84items_pkey primary key (id),
  constraint assessments_84items_assignment_id_fkey foreign KEY (assignment_id) references assessment_assignments (id) on delete CASCADE,
  constraint assessments_84items_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'low'::character varying,
            'moderate'::character varying,
            'high'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_updated_at on public.assessments_84items using btree (updated_at) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_student on public.assessments_84items using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_risk_level on public.assessments_84items using btree (risk_level) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_completed on public.assessments_84items using btree (completed_at) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_type on public.assessments_84items using btree (assessment_type) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_assignment on public.assessments_84items using btree (assignment_id) TABLESPACE pg_default;

create trigger update_assessments_84items_updated_at BEFORE
update on assessments_84items for EACH row
execute FUNCTION update_updated_at_column ();










create table public.assessments_84items_history (
  id uuid not null default gen_random_uuid (),
  original_assessment_id uuid not null,
  student_id uuid not null,
  student_name text not null,
  student_email text not null,
  assessment_type text not null default 'ryff_84'::text,
  responses jsonb not null default '{}'::jsonb,
  scores jsonb not null default '{}'::jsonb,
  original_created_at timestamp with time zone not null default now(),
  archived_at timestamp with time zone not null default now(),
  constraint assessments_84items_history_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_history_original_id on public.assessments_84items_history using btree (original_assessment_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_history_student_id on public.assessments_84items_history using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_assessments_84items_history_archived_at on public.assessments_84items_history using btree (archived_at) TABLESPACE pg_default;









create table public.bulk_assessments (
  id uuid not null default gen_random_uuid (),
  counselor_id uuid null,
  assessment_name character varying(255) not null,
  assessment_type character varying(50) not null,
  target_type character varying(50) not null,
  target_colleges text[] null,
  custom_message text null,
  scheduled_date timestamp with time zone null,
  status character varying(50) null default 'pending'::character varying,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint bulk_assessments_pkey primary key (id),
  constraint bulk_assessments_counselor_id_fkey foreign KEY (counselor_id) references counselors (id) on delete CASCADE,
  constraint bulk_assessments_status_check check (
    (
      (status)::text = any (
        (
          array[
            'pending'::character varying,
            'sent'::character varying,
            'completed'::character varying,
            'cancelled'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_bulk_assessments_counselor_id on public.bulk_assessments using btree (counselor_id) TABLESPACE pg_default;

create index IF not exists idx_bulk_assessments_status on public.bulk_assessments using btree (status) TABLESPACE pg_default;

create index IF not exists idx_bulk_assessments_scheduled_date on public.bulk_assessments using btree (scheduled_date) TABLESPACE pg_default;

create trigger update_bulk_assessments_updated_at BEFORE
update on bulk_assessments for EACH row
execute FUNCTION update_updated_at_column ();













create table public.college_scores (
  id uuid not null default gen_random_uuid (),
  college_name text not null,
  dimension_name text not null,
  raw_score numeric(5, 2) not null,
  student_count integer not null default 0,
  risk_level text not null,
  last_calculated timestamp with time zone null default now(),
  assessment_type text not null default '42items'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint college_scores_pkey primary key (id),
  constraint unique_college_dimension_assessment unique (college_name, dimension_name, assessment_type),
  constraint college_scores_assessment_type_check check (
    (
      assessment_type = any (array['42items'::text, '84items'::text])
    )
  ),
  constraint college_scores_risk_level_check check (
    (
      risk_level = any (array['low'::text, 'medium'::text, 'high'::text])
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_college_scores_college_name on public.college_scores using btree (college_name) TABLESPACE pg_default;

create index IF not exists idx_college_scores_dimension_name on public.college_scores using btree (dimension_name) TABLESPACE pg_default;

create index IF not exists idx_college_scores_risk_level on public.college_scores using btree (risk_level) TABLESPACE pg_default;

create index IF not exists idx_college_scores_assessment_type on public.college_scores using btree (assessment_type) TABLESPACE pg_default;

create index IF not exists idx_college_scores_last_calculated on public.college_scores using btree (last_calculated) TABLESPACE pg_default;

create trigger update_college_scores_updated_at BEFORE
update on college_scores for EACH row
execute FUNCTION update_updated_at_column ();









create table public.college_scores_history (
  id uuid not null default gen_random_uuid (),
  college_name character varying not null,
  dimension_name character varying not null,
  raw_score integer null,
  student_count integer null default 0,
  risk_level character varying null,
  last_calculated timestamp with time zone null,
  assessment_type character varying null default 'ryff_42'::character varying,
  archived_at timestamp with time zone null default now(),
  archived_from_id uuid null,
  archive_reason character varying null default 'student_deactivation'::character varying,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint college_scores_history_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_college_scores_history_college on public.college_scores_history using btree (college_name) TABLESPACE pg_default;

create index IF not exists idx_college_scores_history_dimension on public.college_scores_history using btree (dimension_name) TABLESPACE pg_default;

create index IF not exists idx_college_scores_history_archived_at on public.college_scores_history using btree (archived_at) TABLESPACE pg_default;

create index IF not exists idx_college_scores_history_assessment_type on public.college_scores_history using btree (assessment_type) TABLESPACE pg_default;

create trigger update_college_scores_history_updated_at BEFORE
update on college_scores_history for EACH row
execute FUNCTION update_updated_at_column ();








create table public.counselor_interventions (
  id uuid not null default gen_random_uuid (),
  student_id uuid not null,
  assessment_id uuid null,
  counselor_id uuid not null,
  risk_level character varying(20) not null,
  intervention_title text not null,
  intervention_text text not null,
  counselor_message text null,
  is_read boolean null default false,
  read_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  overall_strategy text null,
  dimension_interventions jsonb null default '{}'::jsonb,
  action_plan jsonb null default '[]'::jsonb,
  status character varying(20) null default 'pending'::character varying,
  constraint counselor_interventions_pkey primary key (id),
  constraint counselor_interventions_assessment_id_fkey foreign KEY (assessment_id) references assessment_assignments (id) on delete set null,
  constraint counselor_interventions_counselor_id_fkey foreign KEY (counselor_id) references counselors (id) on delete CASCADE,
  constraint fk_counselor_interventions_counselor foreign KEY (counselor_id) references counselors (id) on delete CASCADE,
  constraint fk_counselor_interventions_student foreign KEY (student_id) references students (id) on delete CASCADE,
  constraint counselor_interventions_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'low'::character varying,
            'moderate'::character varying,
            'high'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_counselor_interventions_student_id on public.counselor_interventions using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_counselor_interventions_counselor_id on public.counselor_interventions using btree (counselor_id) TABLESPACE pg_default;

create index IF not exists idx_counselor_interventions_created_at on public.counselor_interventions using btree (created_at) TABLESPACE pg_default;

create index IF not exists idx_counselor_interventions_counselor_status on public.counselor_interventions using btree (counselor_id, status) TABLESPACE pg_default;

create index IF not exists idx_counselor_interventions_status on public.counselor_interventions using btree (status) TABLESPACE pg_default;

create trigger update_counselor_interventions_updated_at BEFORE
update on counselor_interventions for EACH row
execute FUNCTION update_updated_at_column ();









create table public.counselors (
  id uuid not null default gen_random_uuid (),
  email character varying(255) not null,
  password_hash character varying(255) not null,
  name character varying(255) not null,
  college character varying(255) null,
  role character varying(50) null default 'counselor'::character varying,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint counselors_pkey primary key (id),
  constraint counselors_email_key unique (email)
) TABLESPACE pg_default;

create index IF not exists idx_counselors_email on public.counselors using btree (email) TABLESPACE pg_default;

create index IF not exists idx_counselors_college on public.counselors using btree (college) TABLESPACE pg_default;




create table public.ryff_history (
  id uuid not null default gen_random_uuid (),
  original_id uuid not null,
  student_id uuid not null,
  assessment_type text null,
  responses jsonb null,
  scores jsonb null,
  overall_score integer null,
  risk_level text null,
  at_risk_dimensions jsonb null,
  assignment_id uuid null,
  completed_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  archived_at timestamp with time zone null default now(),
  constraint ryff_history_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_ryff_history_student_id on public.ryff_history using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_ryff_history_original_id on public.ryff_history using btree (original_id) TABLESPACE pg_default;

create index IF not exists idx_ryff_history_archived_at on public.ryff_history using btree (archived_at) TABLESPACE pg_default;







create table public.ryffscoring (
  id uuid not null default gen_random_uuid (),
  student_id uuid not null,
  assessment_type character varying(20) not null,
  responses jsonb not null,
  scores jsonb not null,
  overall_score numeric(5, 2) null,
  risk_level character varying(20) null,
  at_risk_dimensions jsonb null default '[]'::jsonb,
  assignment_id uuid null,
  completed_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint ryffscoring_pkey primary key (id),
  constraint ryffscoring_assignment_id_fkey foreign KEY (assignment_id) references assessment_assignments (id) on delete set null,
  constraint ryffscoring_assessment_type_check check (
    (
      (assessment_type)::text = any (
        (
          array[
            'ryff_42'::character varying,
            'ryff_84'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint ryffscoring_risk_level_check check (
    (
      (risk_level)::text = any (
        (
          array[
            'low'::character varying,
            'moderate'::character varying,
            'high'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_ryffscoring_student_id on public.ryffscoring using btree (student_id) TABLESPACE pg_default;

create index IF not exists idx_ryffscoring_assessment_type on public.ryffscoring using btree (assessment_type) TABLESPACE pg_default;

create index IF not exists idx_ryffscoring_risk_level on public.ryffscoring using btree (risk_level) TABLESPACE pg_default;

create index IF not exists idx_ryffscoring_completed_at on public.ryffscoring using btree (completed_at) TABLESPACE pg_default;

create trigger update_ryffscoring_updated_at_trigger BEFORE
update on ryffscoring for EACH row
execute FUNCTION update_ryffscoring_updated_at ();






create table public.students (
  id uuid not null default gen_random_uuid (),
  name character varying(255) not null,
  email character varying(255) not null,
  section character varying(100) null,
  id_number character varying(50) null,
  year_level integer null,
  college character varying(255) null,
  semester character varying(50) null,
  status character varying(20) null default 'active'::character varying,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint students_pkey primary key (id),
  constraint students_email_key unique (email),
  constraint students_id_number_key unique (id_number),
  constraint students_status_check check (
    (
      (status)::text = any (
        (
          array[
            'active'::character varying,
            'inactive'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_students_email on public.students using btree (email) TABLESPACE pg_default;

create index IF not exists idx_students_college on public.students using btree (college) TABLESPACE pg_default;

create index IF not exists idx_students_status on public.students using btree (status) TABLESPACE pg_default;

create index IF not exists idx_students_section on public.students using btree (section) TABLESPACE pg_default;

create trigger trigger_students_updated_at BEFORE
update on students for EACH row
execute FUNCTION update_updated_at_column ();








create table public.user_sessions (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  user_type character varying(20) not null,
  session_token character varying(255) not null,
  refresh_token character varying(255) null,
  expires_at timestamp with time zone not null,
  created_at timestamp with time zone null default now(),
  last_accessed timestamp with time zone null default now(),
  ip_address inet null,
  user_agent text null,
  is_active boolean null default true,
  constraint user_sessions_pkey primary key (id),
  constraint user_sessions_refresh_token_key unique (refresh_token),
  constraint user_sessions_session_token_key unique (session_token),
  constraint user_sessions_user_type_check check (
    (
      (user_type)::text = any (
        (
          array[
            'student'::character varying,
            'counselor'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_sessions_token on public.user_sessions using btree (session_token) TABLESPACE pg_default;

create index IF not exists idx_sessions_user on public.user_sessions using btree (user_id, user_type) TABLESPACE pg_default;

create index IF not exists idx_sessions_expires on public.user_sessions using btree (expires_at) TABLESPACE pg_default;















