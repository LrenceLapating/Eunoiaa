const aiService = require('./utils/aiService');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// Test data - sample student assessment
const testStudentData = {
  name: 'Test Student DB',
  subscales: {
    autonomy: 25,
    personal_growth: 30,
    purpose_in_life: 20,
    self_acceptance: 35,
    positive_relations: 28,
    environmental_mastery: 22
  },
  overallScore: 160,
  atRiskDimensions: ['purpose_in_life', 'environmental_mastery'],
  college: 'Test University',
  section: 'Test Section',
  assessmentType: 'ryff_42'
};

const riskLevel = 'moderate';

async function testDatabaseStorage() {
  console.log('💾 Testing Database Storage...\n');
  
  try {
    // Step 1: Generate AI intervention
    console.log('📝 Generating AI intervention...');
    const intervention = await aiService.generateStructuredIntervention(
      testStudentData, 
      riskLevel
    );
    
    console.log('✅ AI generation successful');
    console.log(`📊 Title: ${intervention.title}`);
    
    // Step 2: Get a test counselor (or create one if needed)
    console.log('\n👨‍⚕️ Finding test counselor...');
    
    let { data: counselors, error: counselorError } = await supabase
      .from('counselors')
      .select('id, name, email')
      .limit(1);
    
    if (counselorError) {
      console.error('❌ Error fetching counselors:', counselorError);
      return { success: false, error: counselorError.message };
    }
    
    if (!counselors || counselors.length === 0) {
      console.log('⚠️  No counselors found, creating test counselor...');
      
      const { data: newCounselor, error: createError } = await supabase
        .from('counselors')
        .insert({
          name: 'Test Counselor',
          email: 'test.counselor@test.com',
          password_hash: 'test_hash',
          college: 'Test University',
          role: 'counselor'
        })
        .select()
        .single();
      
      if (createError) {
        console.error('❌ Error creating test counselor:', createError);
        return { success: false, error: createError.message };
      }
      
      counselors = [newCounselor];
      console.log('✅ Test counselor created');
    }
    
    const counselor = counselors[0];
    console.log(`✅ Using counselor: ${counselor.name} (${counselor.id})`);
    
    // Step 3: Get a test student (or create one if needed)
    console.log('\n👨‍🎓 Finding test student...');
    
    let { data: students, error: studentError } = await supabase
      .from('students')
      .select('id, name, email')
      .limit(1);
    
    if (studentError) {
      console.error('❌ Error fetching students:', studentError);
      return { success: false, error: studentError.message };
    }
    
    if (!students || students.length === 0) {
      console.log('⚠️  No students found, creating test student...');
      
      const { data: newStudent, error: createStudentError } = await supabase
        .from('students')
        .insert({
          name: 'Test Student DB',
          email: 'test.student.db@test.com',
          student_id: 'TEST-DB-001',
          college: 'Test University',
          section: 'Test Section',
          year_level: '1st Year'
        })
        .select()
        .single();
      
      if (createStudentError) {
        console.error('❌ Error creating test student:', createStudentError);
        return { success: false, error: createStudentError.message };
      }
      
      students = [newStudent];
      console.log('✅ Test student created');
    }
    
    const student = students[0];
    console.log(`✅ Using student: ${student.name} (${student.id})`);
    
    // Step 4: Save intervention to database
    console.log('\n💾 Saving intervention to database...');
    
    const interventionData = {
      student_id: student.id,
      counselor_id: counselor.id,
      assessment_type: 'ryff_42',
      risk_level: riskLevel,
      intervention_title: intervention.title,
      intervention_text: intervention.interventionText || 'Generated intervention text',
      overall_strategy: intervention.overallStrategy,
      dimension_interventions: intervention.dimensionInterventions,
      action_plan: intervention.actionPlan,
      overall_score: testStudentData.overallScore,
      dimension_scores: testStudentData.subscales,
      counselor_message: 'This is a test intervention generated by the AI system.',
      is_read: false,
      status: 'pending'
    };
    
    console.log('📋 Intervention data to save:');
    console.log(`   - Title: ${interventionData.intervention_title}`);
    console.log(`   - Overall Strategy Length: ${interventionData.overall_strategy?.length || 0} chars`);
    console.log(`   - Dimension Interventions: ${Object.keys(interventionData.dimension_interventions || {}).length} dimensions`);
    console.log(`   - Action Plan Items: ${Array.isArray(interventionData.action_plan) ? interventionData.action_plan.length : 0}`);
    
    const { data: savedIntervention, error: saveError } = await supabase
      .from('counselor_interventions')
      .insert(interventionData)
      .select()
      .single();
    
    if (saveError) {
      console.error('❌ Error saving intervention:', saveError);
      return { success: false, error: saveError.message };
    }
    
    console.log('✅ Intervention saved successfully');
    console.log(`📋 Saved intervention ID: ${savedIntervention.id}`);
    
    // Step 5: Retrieve and verify stored data
    console.log('\n🔍 Retrieving and verifying stored data...');
    
    const { data: retrievedIntervention, error: retrieveError } = await supabase
      .from('counselor_interventions')
      .select('*')
      .eq('id', savedIntervention.id)
      .single();
    
    if (retrieveError) {
      console.error('❌ Error retrieving intervention:', retrieveError);
      return { success: false, error: retrieveError.message };
    }
    
    console.log('✅ Intervention retrieved successfully');
    
    // Step 6: Validate stored data structure
    console.log('\n🎯 Validating stored data structure...');
    console.log('=' .repeat(50));
    
    const validations = [];
    
    // Check overall strategy
    if (retrievedIntervention.overall_strategy && retrievedIntervention.overall_strategy.length > 0) {
      console.log('✅ Overall Strategy: Stored correctly');
      console.log(`   Length: ${retrievedIntervention.overall_strategy.length} characters`);
      validations.push({ field: 'overall_strategy', status: 'pass' });
    } else {
      console.log('❌ Overall Strategy: Missing or empty');
      validations.push({ field: 'overall_strategy', status: 'fail' });
    }
    
    // Check dimension interventions
    if (retrievedIntervention.dimension_interventions && 
        typeof retrievedIntervention.dimension_interventions === 'object' &&
        Object.keys(retrievedIntervention.dimension_interventions).length > 0) {
      console.log('✅ Dimension Interventions: Stored correctly');
      console.log(`   Dimensions: ${Object.keys(retrievedIntervention.dimension_interventions).join(', ')}`);
      
      // Check each dimension
      Object.entries(retrievedIntervention.dimension_interventions).forEach(([dim, content]) => {
        if (content && content.length > 0) {
          console.log(`   ✅ ${dim}: ${content.length} characters`);
        } else {
          console.log(`   ❌ ${dim}: Empty or missing`);
        }
      });
      
      validations.push({ field: 'dimension_interventions', status: 'pass' });
    } else {
      console.log('❌ Dimension Interventions: Missing or invalid');
      validations.push({ field: 'dimension_interventions', status: 'fail' });
    }
    
    // Check action plan
    if (retrievedIntervention.action_plan && 
        Array.isArray(retrievedIntervention.action_plan) &&
        retrievedIntervention.action_plan.length > 0) {
      console.log('✅ Action Plan: Stored correctly');
      console.log(`   Items: ${retrievedIntervention.action_plan.length}`);
      retrievedIntervention.action_plan.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.substring(0, 50)}...`);
      });
      validations.push({ field: 'action_plan', status: 'pass' });
    } else {
      console.log('❌ Action Plan: Missing or invalid');
      validations.push({ field: 'action_plan', status: 'fail' });
    }
    
    // Check metadata
    const metadataFields = ['intervention_title', 'risk_level', 'assessment_type', 'overall_score'];
    metadataFields.forEach(field => {
      if (retrievedIntervention[field] !== null && retrievedIntervention[field] !== undefined) {
        console.log(`✅ ${field}: ${retrievedIntervention[field]}`);
        validations.push({ field, status: 'pass' });
      } else {
        console.log(`❌ ${field}: Missing`);
        validations.push({ field, status: 'fail' });
      }
    });
    
    // Step 7: Clean up test data
    console.log('\n🧹 Cleaning up test data...');
    
    const { error: deleteError } = await supabase
      .from('counselor_interventions')
      .delete()
      .eq('id', savedIntervention.id);
    
    if (deleteError) {
      console.log(`⚠️  Warning: Could not delete test intervention: ${deleteError.message}`);
    } else {
      console.log('✅ Test intervention deleted');
    }
    
    // Summary
    console.log('\n' + '='.repeat(60));
    console.log('📊 DATABASE STORAGE TEST SUMMARY');
    console.log('='.repeat(60));
    
    const passedValidations = validations.filter(v => v.status === 'pass').length;
    const totalValidations = validations.length;
    
    console.log(`✅ Validations Passed: ${passedValidations}/${totalValidations}`);
    
    const failedValidations = validations.filter(v => v.status === 'fail');
    if (failedValidations.length > 0) {
      console.log(`❌ Failed Fields: ${failedValidations.map(v => v.field).join(', ')}`);
    }
    
    const overallSuccess = passedValidations === totalValidations;
    console.log(`\n🎉 Overall Database Storage: ${overallSuccess ? '✅ PASS' : '❌ FAIL'}`);
    
    return {
      success: overallSuccess,
      details: {
        validationsPassed: passedValidations,
        totalValidations,
        failedFields: failedValidations.map(v => v.field),
        interventionId: savedIntervention.id
      }
    };
    
  } catch (error) {
    console.error('❌ Database storage test failed:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Run the test
if (require.main === module) {
  testDatabaseStorage()
    .then(result => {
      if (result.success) {
        console.log('\n🎉 All database storage tests passed!');
        process.exit(0);
      } else {
        console.log('\n❌ Database storage tests failed!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('Test execution failed:', error);
      process.exit(1);
    });
}

module.exports = { testDatabaseStorage };