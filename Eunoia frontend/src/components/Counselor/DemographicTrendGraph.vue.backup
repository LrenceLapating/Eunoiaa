<template>
  <div class="demographic-trend-section">
    <div class="section-header">
      <div class="section-title">
        <div class="section-icon demographic-icon">
          <i class="fas fa-users"></i>
        </div>
        <div>
          <h3>Demographic Risk Analysis</h3>
          <p>Mental health risk levels and at-risk dimensions by gender across school years</p>
        </div>
      </div>
      
      <!-- Info Text -->
      <div class="info-text">
        <p>Comparing at-risk student counts between male and female students across school years</p>
      </div>
    </div>

    <!-- Loading State -->
    <div v-if="loading" class="loading-container">
      <div class="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
      </div>
      <p>Loading demographic data...</p>
    </div>

    <!-- Error State -->
    <div v-else-if="error" class="error-container">
      <div class="error-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <p>{{ error }}</p>
      <button @click="fetchDemographicData" class="retry-btn">
        <i class="fas fa-redo"></i>
        Retry
      </button>
    </div>

    <!-- Chart Container -->
    <div v-else class="chart-container">
      <!-- Chart Legend -->
      <div class="chart-legend">
        <div class="legend-item">
          <div class="legend-color male-students"></div>
          <span>Male At-Risk Students</span>
        </div>
        <div class="legend-item">
          <div class="legend-color female-students"></div>
          <span>Female At-Risk Students</span>
        </div>
      </div>

      <!-- Custom Chart Implementation -->
      <div class="demographic-chart">
        <div class="y-axis">
          <div class="y-label" v-for="tick in yAxisTicks" :key="tick">{{ tick }}</div>
        </div>
        
        <div class="chart-content">
          <div 
            v-for="(yearData, index) in filteredChartData" 
            :key="yearData.schoolYear"
            class="year-group"
            :style="{ animationDelay: `${index * 0.1}s` }"
          >
            <!-- School Year Label -->
            <div class="year-label">{{ yearData.schoolYear }}</div>
            
            <!-- Bar Group -->
            <div class="bar-group">
              <!-- Female At-Risk Students Bar (only show if has data) -->
              <div 
                v-if="getGenderAtRiskCount(yearData, 'Female') > 0"
                class="bar female-risk-bar"
                :style="{ height: `${getBarHeight(getGenderAtRiskCount(yearData, 'Female'))}%` }"
                @mouseover="showTooltip($event, yearData, 'female-at-risk')"
                @mouseleave="hideTooltip"
              >
                <div class="bar-value">{{ getGenderAtRiskCount(yearData, 'Female') }}</div>
              </div>
              
              <!-- Male At-Risk Students Bar (only show if has data) -->
              <div 
                v-if="getGenderAtRiskCount(yearData, 'Male') > 0"
                class="bar male-risk-bar"
                :style="{ height: `${getBarHeight(getGenderAtRiskCount(yearData, 'Male'))}%` }"
                @mouseover="showTooltip($event, yearData, 'male-at-risk')"
                @mouseleave="hideTooltip"
              >
                <div class="bar-value">{{ getGenderAtRiskCount(yearData, 'Male') }}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tooltip -->
    <div 
      v-if="tooltip.show" 
      class="chart-tooltip"
      :style="{ left: tooltip.x + 'px', top: tooltip.y + 'px' }"
    >
      <div class="tooltip-title">{{ tooltip.title }}</div>
      <div class="tooltip-content">{{ tooltip.content }}</div>
    </div>
  </div>
</template>

<script>
import { apiUrl } from '../../utils/apiUtils';

export default {
  name: 'DemographicTrendGraph',
  data() {
    return {
      loading: true,
      error: null,
      chartData: [],
      summary: {
        mostAtRiskGender: '',
        mostAtRiskPercentage: 0,
        topAtRiskDimension: '',
        topDimensionCount: 0,
        totalAtRiskStudents: 0,
        overallRiskPercentage: 0
      },
      tooltip: {
        show: false,
        x: 0,
        y: 0,
        title: '',
        content: ''
      }
    };
  },
  computed: {
    yAxisTicks() {
      if (this.chartData.length === 0) return [0, 1, 2, 3, 4, 5];
      
      // For male vs female comparison, we need to consider both gender counts
      const maxCount = Math.max(...this.chartData.map(d => 
        Math.max(
          this.getGenderAtRiskCount(d, 'Male'),
          this.getGenderAtRiskCount(d, 'Female')
        )
      ));
      
      console.log('ðŸ“Š Max count for y-axis:', maxCount);
      
      const tickCount = 5;
      const step = Math.max(1, Math.ceil(maxCount / tickCount)); // Ensure minimum step of 1
      const ticks = [];
      
      // Start from 0 and go up to create proper ascending Y-axis
      for (let i = 0; i <= tickCount; i++) {
        ticks.push(i * step);
      }
      
      console.log('ðŸ“Š Y-axis ticks:', ticks);
      return ticks;
    },
    
    maxValue() {
      return Math.max(...this.yAxisTicks);
    },
    
    filteredChartData() {
      // Only show years that have actual data (either male or female at-risk students)
      return this.chartData.filter(yearData => {
        const maleCount = this.getGenderAtRiskCount(yearData, 'Male');
        const femaleCount = this.getGenderAtRiskCount(yearData, 'Female');
        return maleCount > 0 || femaleCount > 0;
      });
    }
  },
  
  mounted() {
    this.fetchDemographicData();
  },
  
  methods: {
    async fetchDemographicData() {
      this.loading = true;
      this.error = null;
      
      try {
        const response = await fetch(apiUrl(`demographic-trends/gender-trends?gender=all`), {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
          this.chartData = result.data.trends;
          this.summary = result.data.summary;
          console.log('ðŸ“Š Demographic data loaded:', result.data);
          console.log('ðŸ“Š Chart data:', this.chartData);
          console.log('ðŸ“Š First year data structure:', this.chartData[0]);
          
          // Log each year's data in detail
          this.chartData.forEach((yearData, index) => {
            console.log(`ðŸ“Š Year ${index} (${yearData.schoolYear}):`, {
              schoolYear: yearData.schoolYear,
              year: yearData.year,
              riskAnalysis: yearData.riskAnalysis,
              maleAtRisk: yearData.riskAnalysis?.byGender?.Male?.atRisk || 0,
              femaleAtRisk: yearData.riskAnalysis?.byGender?.Female?.atRisk || 0
            });
          });
        } else {
          throw new Error(result.message || 'Failed to fetch demographic data');
        }
        
      } catch (error) {
        console.error('Error fetching demographic data:', error);
        this.error = error.message || 'Failed to load demographic data';
      } finally {
        this.loading = false;
      }
    },
    
    getBarHeight(value) {
      if (this.maxValue === 0) return 0;
      const height = (value / this.maxValue) * 100;
      console.log(`ðŸ“Š Bar height calculation: value=${value}, maxValue=${this.maxValue}, height=${height}%`);
      // Much more prominent scaling: minimum 30% height for visibility when value > 0, and scale up significantly
      if (value > 0) {
        return Math.max(height * 2, 30); // Scale up by 200% and ensure minimum 30%
      }
      return 0;
    },
    
    getGenderAtRiskCount(yearData, gender) {
      console.log(`ðŸ“Š Getting ${gender} at-risk count for:`, yearData);
      
      if (!yearData || !yearData.riskAnalysis || !yearData.riskAnalysis.byGender) {
        console.log(`ðŸ“Š Missing data structure for ${gender}`);
        return 0;
      }
      
      const genderData = yearData.riskAnalysis.byGender[gender];
      console.log(`ðŸ“Š ${gender} gender data:`, genderData);
      
      if (!genderData) {
        console.log(`ðŸ“Š No data for ${gender}`);
        return 0;
      }
      
      // ONLY count students who are truly at-risk (not moderate or healthy)
      const atRiskCount = genderData.atRisk || 0;
      console.log(`ðŸ“Š ${gender} at-risk count (ONLY at-risk):`, atRiskCount);
      return atRiskCount;
    },
    
    getPercentageBarHeight(percentage) {
      // For percentage bars, use 100% as max
      return Math.max(percentage, 2); // Minimum 2% height for visibility
    },
    
    getRiskCount(yearData, riskLevel) {
      if (!yearData.riskAnalysis) return 0;
      
      // If a specific gender is selected, get data from that gender
      if (this.selectedGender !== 'all' && yearData.riskAnalysis.byGender) {
        const genderData = yearData.riskAnalysis.byGender[this.selectedGender];
        if (!genderData) return 0;
        
        switch (riskLevel) {
          case 'atRisk':
            return genderData.atRisk || 0;
          case 'moderate':
            return genderData.moderate || 0;
          case 'healthy':
            return genderData.healthy || 0;
          default:
            return 0;
        }
      }
      
      // For 'all' genders, sum up all gender data
      if (yearData.riskAnalysis.byGender) {
        let total = 0;
        Object.values(yearData.riskAnalysis.byGender).forEach(genderData => {
          switch (riskLevel) {
            case 'atRisk':
              total += genderData.atRisk || 0;
              break;
            case 'moderate':
              total += genderData.moderate || 0;
              break;
            case 'healthy':
              total += genderData.healthy || 0;
              break;
          }
        });
        return total;
      }
      
      // Fallback to old structure if it exists
      switch (riskLevel) {
        case 'atRisk':
          return yearData.riskAnalysis.atRiskCount || 0;
        case 'moderate':
          return yearData.riskAnalysis.moderateCount || 0;
        case 'healthy':
          return yearData.riskAnalysis.healthyCount || 0;
        default:
          return 0;
      }
    },
    
    getGenderRiskPercentage(yearData, gender) {
      if (!yearData.riskAnalysis || !yearData.riskAnalysis.byGender) return 0;
      
      const genderData = yearData.riskAnalysis.byGender[gender];
      if (!genderData) return 0;
      
      return Math.round(parseFloat(genderData.riskPercentage) || 0);
    },
    
    showTooltip(event, yearData, type) {
      const rect = event.target.getBoundingClientRect();
      this.tooltip.x = rect.left + rect.width / 2;
      this.tooltip.y = rect.top - 10;
      
      switch (type) {
        case 'male-at-risk':
          this.tooltip.title = `${yearData.schoolYear} - Male At-Risk Students`;
          this.tooltip.content = `${this.getGenderAtRiskCount(yearData, 'Male')} male students with at-risk dimensions`;
          break;
        case 'female-at-risk':
          this.tooltip.title = `${yearData.schoolYear} - Female At-Risk Students`;
          this.tooltip.content = `${this.getGenderAtRiskCount(yearData, 'Female')} female students with at-risk dimensions`;
          break;
      }
      
      this.tooltip.show = true;
    },
    
    hideTooltip() {
      this.tooltip.show = false;
    }
  }
};
</script>

<style scoped>
.demographic-trend-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  margin-bottom: 24px;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.section-title {
  display: flex;
  align-items: center;
  gap: 15px;
}

.section-icon.demographic-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 10px;
  color: white;
  font-size: 18px;
}

.section-title h3 {
  font-size: 18px;
  font-weight: 600;
  color: #1a2e35;
  margin: 0;
}

.section-title p {
  font-size: 14px;
  color: #546e7a;
  margin: 4px 0 0 0;
}

.info-text {
  text-align: center;
  margin-bottom: 16px;
}

.info-text p {
  font-size: 14px;
  color: #546e7a;
  margin: 0;
  font-style: italic;
}

.filter-controls {
  display: flex;
  align-items: center;
  gap: 12px;
}

.gender-filter {
  padding: 8px 16px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  background: white;
  font-size: 14px;
  font-weight: 500;
  color: #1a2e35;
  cursor: pointer;
  transition: all 0.3s ease;
}

.gender-filter:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.loading-container, .error-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  text-align: center;
}

.loading-spinner {
  font-size: 32px;
  color: #667eea;
  margin-bottom: 16px;
}

.error-icon {
  font-size: 32px;
  color: #f44336;
  margin-bottom: 16px;
}

.retry-btn {
  background: #667eea;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  margin-top: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: background 0.3s ease;
}

.retry-btn:hover {
  background: #5a67d8;
}

.chart-container {
  position: relative;
}

.chart-legend {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 24px;
  margin-bottom: 24px;
  flex-wrap: wrap;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 13px;
  color: #546e7a;
}

.legend-color {
  width: 16px;
  height: 16px;
  border-radius: 4px;
}

.legend-color.at-risk-students {
  background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
}

.legend-color.moderate-risk-students {
  background: linear-gradient(135deg, #feca57 0%, #ff9ff3 100%);
}

.legend-color.healthy-students {
  background: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%);
}

.legend-color.male-students {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.legend-color.female-students {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

.gender-breakdown {
  display: flex;
  gap: 16px;
  margin-left: 16px;
  padding-left: 16px;
  border-left: 1px solid #e0e0e0;
}

.demographic-chart {
  display: flex;
  height: 350px;
  margin: 20px 0;
  position: relative;
  background: linear-gradient(to top, rgba(0,0,0,0.02) 1px, transparent 1px);
  background-size: 100% 20%;
  background-repeat: repeat-y;
  border-radius: 8px;
  padding: 20px;
}

.y-axis {
  display: flex;
  flex-direction: column-reverse;
  justify-content: space-between;
  width: 50px;
  padding: 10px 0;
}

.y-label {
  font-size: 12px;
  color: #546e7a;
  text-align: right;
  padding-right: 12px;
  font-weight: 500;
}

.chart-content {
  display: flex;
  flex: 1;
  justify-content: space-around;
  align-items: flex-end;
  padding: 20px 10px;
  border-bottom: 2px solid #e0e0e0;
}

.year-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 20%;
  animation: slideUp 0.6s ease-out forwards;
  opacity: 0;
  transform: translateY(20px);
}

@keyframes slideUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.year-label {
  font-size: 12px;
  font-weight: 600;
  color: #1a2e35;
  margin-bottom: 12px;
  text-align: center;
  white-space: nowrap;
}

.bar-group {
  display: flex;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: flex-end;
  gap: 8px;
}

.bar {
  width: 80px;
  border-radius: 12px 12px 0 0;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
  animation: growUp 0.8s ease-out forwards;
  transform-origin: bottom;
  min-height: 20px; /* Ensure bars are always visible */
}

@keyframes growUp {
  from {
    transform: scaleY(0);
  }
  to {
    transform: scaleY(1);
  }
}

.bar:hover {
  transform: scaleY(1.05);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.bar.at-risk-bar {
  background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
}

.bar.moderate-risk-bar {
  background: linear-gradient(135deg, #feca57 0%, #ff9ff3 100%);
}

.bar.healthy-bar {
  background: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%);
}

.bar.male-risk-bar {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.bar.female-risk-bar {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

.bar-value {
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 10px;
  font-weight: 600;
  color: #1a2e35;
  background: rgba(255, 255, 255, 0.9);
  padding: 2px 6px;
  border-radius: 4px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.bar:hover .bar-value {
  opacity: 1;
}

.summary-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin-top: 24px;
}

.stat-card {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 20px;
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  border-radius: 12px;
  border: 1px solid #e2e8f0;
  transition: all 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.stat-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  color: white;
  font-size: 20px;
}

.stat-content {
  flex: 1;
}

.stat-number {
  font-size: 24px;
  font-weight: 700;
  color: #1a2e35;
  line-height: 1;
}

.stat-label {
  font-size: 13px;
  color: #546e7a;
  margin-top: 4px;
  font-weight: 500;
}

.stat-description {
  font-size: 11px;
  color: #78909c;
  margin-top: 2px;
  font-weight: 400;
}

.chart-tooltip {
  position: fixed;
  background: rgba(26, 46, 53, 0.95);
  color: white;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 13px;
  pointer-events: none;
  z-index: 1000;
  transform: translateX(-50%) translateY(-100%);
  box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  backdrop-filter: blur(10px);
}

.tooltip-title {
  font-weight: 600;
  margin-bottom: 4px;
}

.tooltip-content {
  font-size: 12px;
  opacity: 0.9;
}

/* Responsive Design */
@media (max-width: 768px) {
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 16px;
  }
  
  .chart-legend {
    gap: 16px;
  }
  
  .gender-breakdown {
    margin-left: 0;
    padding-left: 0;
    border-left: none;
    border-top: 1px solid #e0e0e0;
    padding-top: 8px;
  }
  
  .demographic-chart {
    height: 280px;
    padding: 15px;
  }
  
  .bar {
    width: 14px;
  }
  
  .year-label {
    font-size: 11px;
  }
  
  .summary-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }
  
  .stat-card {
    padding: 16px;
  }
  
  .stat-icon {
    width: 40px;
    height: 40px;
    font-size: 16px;
  }
  
  .stat-number {
    font-size: 20px;
  }
}
</style>